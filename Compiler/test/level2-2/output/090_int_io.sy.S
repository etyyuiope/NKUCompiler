.macro mov32, reg, val
 	movw \reg, #:lower16:\val
 	movt \reg, #:upper16:\val
.endm
.macro cpu_id, rd
 	mrc	p15, 0, \rd, c0, c0, 5
 	and	\rd, \rd, #0xF
.endm
.text
.syntax unified

.data
.globl ascii_0
ascii_0:
.word 48

.globl main
.type main, %function
main:
	push {r14}
	push {r10}
	push {r9}
	push {r8}
	push {r7}
	push {r6}
	push {r5}
	push {r4}
	push {fp}
	mov fp, sp
	mov r8, #0
	sub sp, sp, r8
.LBmain:
	bl my_getint
	mov r8, r0
	mov r9, r8
.LB_main6_LOOP_BEGIN:
	mov r8, #0
	cmp r9, r8
	mov r8, #0
	movgt r8, #1
	mov r7, #0
	cmp r8, r7
	beq .LB6_LOOP_END
	b .LB6_LOOP_BODY
.LB6_LOOP_BODY:
	bl my_getint
	mov r7, r0
	mov r8, r7
	mov r0, r8
	bl my_putint
	mov r8, r0
	mov r0, #10
	bl putch
	mov r8, r0
	sub r8, r9, #1
	mov r9, r8
	b .LB_main6_LOOP_BEGIN
.LB6_LOOP_END:
	mov r0, #0
	mov sp, fp
	pop {fp}
	pop {r4}
	pop {r5}
	pop {r6}
	pop {r7}
	pop {r8}
	pop {r9}
	pop {r10}
	pop {r14}
	mov pc, r14

.globl my_getint
.type my_getint, %function
my_getint:
	push {r14}
	push {r10}
	push {r9}
	push {r8}
	push {r7}
	push {r6}
	push {r5}
	push {r4}
	push {fp}
	mov fp, sp
	mov r8, #0
	sub sp, sp, r8
.LBmy_getint:
	mov r9, #0
.LB_my_getint0_LOOP_BEGIN:
	mov r7, #1
	cmp r7, #0
	beq .LB0_LOOP_END
	b .LB0_LOOP_BODY
.LB0_LOOP_BODY:
	bl getch
	mov r7, r0
	mov r6, #0
	mov32 r6, ascii_0
	ldr r6, [r6, #0]
	sub r7, r7, r6
	mov r8, r7
	mov r7, #0
	cmp r8, r7
	mov r7, #1
	blt .LB6_COND_END
	mov r6, #9
	cmp r8, r6
	mov r6, #0
	movgt r6, #1
	mov r7, r6
.LB6_COND_END:
	mov r6, #0
	cmp r7, r6
	beq .LBB_1_ELSE
	b .LBB_1_IF
.LBB_1_IF:
	b .LB0_LOOP_CONTINUE
	b .LBB_1_END_IF
.LBB_1_ELSE:
	b .LB0_LOOP_END
	b .LBB_1_END_IF
.LBB_1_END_IF:
.LB0_LOOP_CONTINUE:
	b .LB_my_getint0_LOOP_BEGIN
.LB0_LOOP_END:
	mov r9, r8
.LB_2_LOOP_BEGIN:
	mov r7, #1
	cmp r7, #0
	beq .LB2_LOOP_END
	b .LB2_LOOP_BODY
.LB2_LOOP_BODY:
	bl getch
	mov r7, r0
	mov r6, #0
	mov32 r6, ascii_0
	ldr r6, [r6, #0]
	sub r7, r7, r6
	mov r8, r7
	mov r7, #0
	cmp r8, r7
	mov r7, #0
	blt .LB_12_COND_END
	mov r6, #9
	cmp r8, r6
	mov r6, #0
	movle r6, #1
	mov r7, r6
.LB_12_COND_END:
	mov r6, #0
	cmp r7, r6
	beq .LBB_3_ELSE
	b .LBB_3_IF
.LBB_3_IF:
	mov r7, #10
	mul r7, r9, r7
	mov r6, r8
	add r7, r7, r6
	mov r9, r7
	b .LBB_3_END_IF
.LBB_3_ELSE:
	b .LB2_LOOP_END
	b .LBB_3_END_IF
.LBB_3_END_IF:
	b .LB_2_LOOP_BEGIN
.LB2_LOOP_END:
	mov r0, r9
	mov sp, fp
	pop {fp}
	pop {r4}
	pop {r5}
	pop {r6}
	pop {r7}
	pop {r8}
	pop {r9}
	pop {r10}
	pop {r14}
	mov pc, r14

.globl my_putint
.type my_putint, %function
my_putint:
	push {r14}
	push {r10}
	push {r9}
	push {r8}
	push {r7}
	push {r6}
	push {r5}
	push {r4}
	push {fp}
	mov fp, sp
	mov r8, #0
	sub sp, sp, r8
.LBmy_putint:
	mov r9, r0
	sub sp, sp, #64
	mov r8, #0
.LB_my_putint4_LOOP_BEGIN:
	mov r7, #0
	cmp r9, r7
	mov r7, #0
	movgt r7, #1
	mov r6, #0
	cmp r7, r6
	beq .LB4_LOOP_END
	b .LB4_LOOP_BODY
.LB4_LOOP_BODY:
	mov r7, r0
	mov r6, r1
	mov r0, r9
	mov r1, #10
	bl __aeabi_idivmod
	mov r5, r1
	mov r0, r7
	mov r1, r6
	mov r7, #0
	mov32 r7, ascii_0
	ldr r7, [r7, #0]
	add r7, r5, r7
	mov r6, #4
	mul r6, r8, r6
	mov r5, sp
	str r7, [r5, r6]
	mov r7, r0
	mov r6, r1
	mov r0, r9
	mov r1, #10
	bl __aeabi_idiv
	mov r5, r0
	mov r0, r7
	mov r1, r6
	mov r9, r5
	add r7, r8, #1
	mov r8, r7
	b .LB_my_putint4_LOOP_BEGIN
.LB4_LOOP_END:
.LB_5_LOOP_BEGIN:
	mov r9, #0
	cmp r8, r9
	mov r9, #0
	movgt r9, #1
	mov r7, #0
	cmp r9, r7
	beq .LB5_LOOP_END
	b .LB5_LOOP_BODY
.LB5_LOOP_BODY:
	sub r9, r8, #1
	mov r8, r9
	mov r9, #4
	mul r9, r8, r9
	mov r7, sp
	ldr r9, [r7, r9]
	mov r0, r9
	bl putch
	mov r9, r0
	b .LB_5_LOOP_BEGIN
.LB5_LOOP_END:
	mov sp, fp
	pop {fp}
	pop {r4}
	pop {r5}
	pop {r6}
	pop {r7}
	pop {r8}
	pop {r9}
	pop {r10}
	pop {r14}
	mov pc, r14

.ident "@ Generated by Takanashi Compiler Â© Haobin Chen & Jiawei Xu 1640004941"