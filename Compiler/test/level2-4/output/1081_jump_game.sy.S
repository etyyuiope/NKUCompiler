.macro mov32, reg, val
 	movw \reg, #:lower16:\val
 	movt \reg, #:upper16:\val
.endm
.macro cpu_id, rd
 	mrc	p15, 0, \rd, c0, c0, 5
 	and	\rd, \rd, #0xF
.endm
.text
.syntax unified

.data
.globl canJump
.type canJump, %function
canJump:
	push {r14}
	push {r10}
	push {r9}
	push {r8}
	push {r7}
	push {r6}
	push {r5}
	push {r4}
	push {fp}
	mov fp, sp
	mov r8, #0
	sub sp, sp, r8
.LBcanJump:
	mov r9, r0
	mov r8, r1
	mov r7, #1
	cmp r8, r7
	mov r7, #0
	moveq r7, #1
	mov r6, #0
	cmp r7, r6
	beq .LBB_canJump0_ELSE
	b .LBB_canJump0_IF
.LBB_canJump0_IF:
	mov r0, #1
	mov sp, fp
	pop {fp}
	pop {r4}
	pop {r5}
	pop {r6}
	pop {r7}
	pop {r8}
	pop {r9}
	pop {r10}
	pop {r14}
	mov pc, r14
.LBB_canJump0_ELSE:
	mov r7, #0
	mov r6, #4
	mov r6, r6
	mul r7, r7, r6
	mov r6, r9
	ldr r7, [r6, r7]
	sub r6, r8, #2
	cmp r7, r6
	mov r7, #0
	movgt r7, #1
	mov r6, #0
	cmp r7, r6
	beq .LBB_canJump1_ELSE
	b .LBB_canJump1_IF
.LBB_canJump1_IF:
	mov r0, #1
	mov sp, fp
	pop {fp}
	pop {r4}
	pop {r5}
	pop {r6}
	pop {r7}
	pop {r8}
	pop {r9}
	pop {r10}
	pop {r14}
	mov pc, r14
.LBB_canJump1_ELSE:
	sub sp, sp, #40
	mov r7, #0
.LB_canJump2_LOOP_BEGIN:
	sub r6, r8, #1
	cmp r7, r6
	mov r6, #0
	movlt r6, #1
	mov r5, #0
	cmp r6, r5
	beq .LB2_LOOP_END
	b .LB2_LOOP_BODY
.LB2_LOOP_BODY:
	mov r6, #4
	mov r6, r6
	mul r6, r7, r6
	mov r5, sp
	add r5, r5, #0
	mov r10, #0
	str r10, [r5, r6]
	add r6, r7, #1
	mov r7, r6
	b .LB_canJump2_LOOP_BEGIN
.LB2_LOOP_END:
	sub r7, r8, #1
	mov r6, #4
	mov r6, r6
	mul r7, r7, r6
	mov r6, sp
	add r6, r6, #0
	mov r5, #1
	str r5, [r6, r7]
	sub r7, r8, #2
	mov r7, r7
.LB_3_LOOP_BEGIN:
	mov r6, #0
	sub r6, r6, #1
	cmp r7, r6
	mov r6, #0
	movgt r6, #1
	mov r5, #0
	cmp r6, r5
	beq .LB3_LOOP_END
	b .LB3_LOOP_BODY
.LB3_LOOP_BODY:
	mov r5, #4
	mov r5, r5
	mul r5, r7, r5
	mov r10, r9
	ldr r5, [r10, r5]
	sub r10, r8, #1
	mov r4, r7
	sub r10, r10, r4
	cmp r5, r10
	mov r5, #0
	movlt r5, #1
	mov r10, #0
	cmp r5, r10
	beq .LBB_4_ELSE
	b .LBB_4_IF
.LBB_4_IF:
	mov r5, #4
	mov r5, r5
	mul r5, r7, r5
	mov r10, r9
	ldr r5, [r10, r5]
	mov r6, r5
	b .LBB_4_END_IF
.LBB_4_ELSE:
	sub r5, r8, #1
	mov r10, r7
	sub r5, r5, r10
	mov r6, r5
	b .LBB_4_END_IF
.LBB_4_END_IF:
.LB_5_LOOP_BEGIN:
	mov r5, #0
	sub r5, r5, #1
	cmp r6, r5
	mov r5, #0
	movgt r5, #1
	mov r10, #0
	cmp r5, r10
	beq .LB5_LOOP_END
	b .LB5_LOOP_BODY
.LB5_LOOP_BODY:
	mov r5, r6
	add r5, r7, r5
	mov r10, #4
	mov r10, r10
	mul r5, r5, r10
	mov r10, sp
	add r10, r10, #0
	ldr r5, [r10, r5]
	mov r10, #0
	cmp r5, r10
	mov r5, #0
	movne r5, #1
	mov r10, #0
	cmp r5, r10
	beq .LBB_6_ELSE
	b .LBB_6_IF
.LBB_6_IF:
	mov r5, #4
	mov r5, r5
	mul r5, r7, r5
	mov r10, sp
	add r10, r10, #0
	mov r4, #1
	str r4, [r10, r5]
.LBB_6_ELSE:
	sub r5, r6, #1
	mov r6, r5
	b .LB_5_LOOP_BEGIN
.LB5_LOOP_END:
	sub r5, r7, #1
	mov r7, r5
	b .LB_3_LOOP_BEGIN
.LB3_LOOP_END:
	mov r6, #0
	mov r5, #4
	mov r5, r5
	mul r6, r6, r5
	mov r5, sp
	add r5, r5, #0
	ldr r6, [r5, r6]
	mov r0, r6
	mov sp, fp
	pop {fp}
	pop {r4}
	pop {r5}
	pop {r6}
	pop {r7}
	pop {r8}
	pop {r9}
	pop {r10}
	pop {r14}
	mov pc, r14

.globl main
.type main, %function
main:
	push {r14}
	push {r10}
	push {r9}
	push {r8}
	push {r7}
	push {r6}
	push {r5}
	push {r4}
	push {fp}
	mov fp, sp
	mov r8, #0
	sub sp, sp, r8
.LBmain:
	sub sp, sp, #40
	mov r8, #0
	mov r7, #4
	mov r7, r7
	mul r8, r8, r7
	mov r7, sp
	add r7, r7, #0
	mov r6, #3
	str r6, [r7, r8]
	mov r8, #1
	mov r7, #4
	mov r7, r7
	mul r8, r8, r7
	mov r7, sp
	add r7, r7, #0
	mov r6, #3
	str r6, [r7, r8]
	mov r8, #2
	mov r7, #4
	mov r7, r7
	mul r8, r8, r7
	mov r7, sp
	add r7, r7, #0
	mov r6, #9
	str r6, [r7, r8]
	mov r8, #3
	mov r7, #4
	mov r7, r7
	mul r8, r8, r7
	mov r7, sp
	add r7, r7, #0
	mov r6, #0
	str r6, [r7, r8]
	mov r8, #4
	mov r7, #4
	mov r7, r7
	mul r8, r8, r7
	mov r7, sp
	add r7, r7, #0
	mov r6, #0
	str r6, [r7, r8]
	mov r8, #5
	mov r7, #4
	mov r7, r7
	mul r8, r8, r7
	mov r7, sp
	add r7, r7, #0
	mov r6, #1
	str r6, [r7, r8]
	mov r8, #6
	mov r7, #4
	mov r7, r7
	mul r8, r8, r7
	mov r7, sp
	add r7, r7, #0
	mov r6, #1
	str r6, [r7, r8]
	mov r8, #7
	mov r7, #4
	mov r7, r7
	mul r8, r8, r7
	mov r7, sp
	add r7, r7, #0
	mov r6, #5
	str r6, [r7, r8]
	mov r8, #8
	mov r7, #4
	mov r7, r7
	mul r8, r8, r7
	mov r7, sp
	add r7, r7, #0
	mov r6, #7
	str r6, [r7, r8]
	mov r8, #9
	mov r7, #4
	mov r7, r7
	mul r8, r8, r7
	mov r7, sp
	add r7, r7, #0
	mov r6, #8
	str r6, [r7, r8]
	mov r9, #10
	mov r1, r9
	add r9, sp, #0
	mov r0, r9
	bl canJump
	mov r9, r0
	add sp, sp, #0
	mov r9, r9
	mov r0, r9
	mov sp, fp
	pop {fp}
	pop {r4}
	pop {r5}
	pop {r6}
	pop {r7}
	pop {r8}
	pop {r9}
	pop {r10}
	pop {r14}
	mov pc, r14

.ident "@ Generated by Takanashi Compiler Â© Haobin Chen & Jiawei Xu 1640007383"