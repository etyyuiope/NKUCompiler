.macro mov32, reg, val
 	movw \reg, #:lower16:\val
 	movt \reg, #:upper16:\val
.endm
.macro cpu_id, rd
 	mrc	p15, 0, \rd, c0, c0, 5
 	and	\rd, \rd, #0xF
.endm
.text
.syntax unified

.data
.globl main
.type main, %function
main:
	push {r14}
	push {r10}
	push {r9}
	push {r8}
	push {r7}
	push {r6}
	push {r5}
	push {r4}
	push {fp}
	mov fp, sp
	mov r8, #0
	sub sp, sp, r8
.LBmain:
	mov r8, #3
	mov r1, r8
	mov r0, r8
	bl uniquePaths
	mov r8, r0
	mov r9, r8
	mov r0, r9
	mov sp, fp
	pop {fp}
	pop {r4}
	pop {r5}
	pop {r6}
	pop {r7}
	pop {r8}
	pop {r9}
	pop {r10}
	pop {r14}
	mov pc, r14

.globl uniquePaths
.type uniquePaths, %function
uniquePaths:
	push {r14}
	push {r10}
	push {r9}
	push {r8}
	push {r7}
	push {r6}
	push {r5}
	push {r4}
	push {fp}
	mov fp, sp
	mov r8, #0
	sub sp, sp, r8
.LBuniquePaths:
	mov r9, r0
	mov r8, r1
	mov r7, #1
	cmp r9, r7
	mov r7, #1
	beq .LBuniquePaths4_COND_END
	mov r6, #1
	cmp r8, r6
	mov r6, #0
	moveq r6, #1
	mov r7, r6
.LBuniquePaths4_COND_END:
	mov r6, #0
	cmp r7, r6
	beq .LBB_uniquePaths0_ELSE
	b .LBB_uniquePaths0_IF
.LBB_uniquePaths0_IF:
	mov r0, #1
	mov sp, fp
	pop {fp}
	pop {r4}
	pop {r5}
	pop {r6}
	pop {r7}
	pop {r8}
	pop {r9}
	pop {r10}
	pop {r14}
	mov pc, r14
.LBB_uniquePaths0_ELSE:
	sub sp, sp, #36
	mov r7, #0
.LB_uniquePaths1_LOOP_BEGIN:
	cmp r7, r9
	mov r5, #0
	movlt r5, #1
	mov r10, #0
	cmp r5, r10
	beq .LB1_LOOP_END
	b .LB1_LOOP_BODY
.LB1_LOOP_BODY:
	mov r5, #3
	mul r5, r7, r5
	mov r10, r8
	add r5, r5, r10
	sub r5, r5, #1
	mov r10, #4
	mul r5, r5, r10
	mov r10, sp
	mov r4, #1
	str r4, [r10, r5]
	add r5, r7, #1
	mov r7, r5
	b .LB_uniquePaths1_LOOP_BEGIN
.LB1_LOOP_END:
	mov r7, #0
.LB_2_LOOP_BEGIN:
	cmp r7, r8
	mov r5, #0
	movlt r5, #1
	mov r10, #0
	cmp r5, r10
	beq .LB2_LOOP_END
	b .LB2_LOOP_BODY
.LB2_LOOP_BODY:
	sub r5, r9, #1
	mov r10, #3
	mul r5, r5, r10
	mov r10, r7
	add r5, r5, r10
	mov r10, #4
	mul r5, r5, r10
	mov r10, sp
	mov r4, #1
	str r4, [r10, r5]
	add r5, r7, #1
	mov r7, r5
	b .LB_2_LOOP_BEGIN
.LB2_LOOP_END:
	sub r9, r9, #2
.LB_3_LOOP_BEGIN:
	mov r7, #0
	sub r7, r7, #1
	cmp r9, r7
	mov r7, #0
	movgt r7, #1
	mov r5, #0
	cmp r7, r5
	beq .LB3_LOOP_END
	b .LB3_LOOP_BODY
.LB3_LOOP_BODY:
	sub r7, r8, #2
	mov r6, r7
.LB_4_LOOP_BEGIN:
	mov r7, #0
	sub r7, r7, #1
	cmp r6, r7
	mov r7, #0
	movgt r7, #1
	mov r5, #0
	cmp r7, r5
	beq .LB4_LOOP_END
	b .LB4_LOOP_BODY
.LB4_LOOP_BODY:
	add r7, r9, #1
	mov r5, #3
	mul r7, r7, r5
	mov r5, r6
	add r7, r7, r5
	mov r5, #4
	mul r7, r7, r5
	mov r5, sp
	ldr r7, [r5, r7]
	mov r5, #3
	mul r5, r9, r5
	mov r10, r6
	add r5, r5, r10
	add r5, r5, #1
	mov r10, #4
	mul r5, r5, r10
	mov r10, sp
	ldr r5, [r10, r5]
	add r7, r7, r5
	mov r5, #3
	mul r5, r9, r5
	mov r10, r6
	add r5, r5, r10
	mov r10, #4
	mul r5, r5, r10
	mov r10, sp
	str r7, [r10, r5]
	sub r7, r6, #1
	mov r6, r7
	b .LB_4_LOOP_BEGIN
.LB4_LOOP_END:
	sub r7, r9, #1
	mov r9, r7
	b .LB_3_LOOP_BEGIN
.LB3_LOOP_END:
	mov r9, #0
	mov r8, #4
	mul r9, r9, r8
	mov r8, sp
	ldr r9, [r8, r9]
	mov r0, r9
	mov sp, fp
	pop {fp}
	pop {r4}
	pop {r5}
	pop {r6}
	pop {r7}
	pop {r8}
	pop {r9}
	pop {r10}
	pop {r14}
	mov pc, r14

.ident "@ Generated by Takanashi Compiler Â© Haobin Chen & Jiawei Xu 1640004946"