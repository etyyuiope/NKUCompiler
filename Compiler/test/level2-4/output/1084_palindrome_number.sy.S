.macro mov32, reg, val
 	movw \reg, #:lower16:\val
 	movt \reg, #:upper16:\val
.endm
.macro cpu_id, rd
 	mrc	p15, 0, \rd, c0, c0, 5
 	and	\rd, \rd, #0xF
.endm
.text
.syntax unified

.data
.globl main
.type main, %function
main:
	push {r14}
	push {r10}
	push {r9}
	push {r8}
	push {r7}
	push {r6}
	push {r5}
	push {r4}
	push {fp}
	mov fp, sp
	mov r8, #0
	sub sp, sp, r8
.LBmain:
	mov r9, #1221
	mov r0, r9
	bl palindrome
	mov r7, r0
	mov r8, r7
	mov r7, #1
	cmp r8, r7
	mov r8, #0
	moveq r8, #1
	mov r7, #0
	cmp r8, r7
	beq .LBB_main2_ELSE
	b .LBB_main2_IF
.LBB_main2_IF:
	mov r0, r9
	bl putint
	mov r8, r0
	b .LBB_main2_END_IF
.LBB_main2_ELSE:
	mov r9, #0
	mov r0, r9
	bl putint
	mov r8, r0
	b .LBB_main2_END_IF
.LBB_main2_END_IF:
	mov r9, #10
	mov r0, r9
	bl putch
	mov r8, r0
	mov r0, #0
	mov sp, fp
	pop {fp}
	pop {r4}
	pop {r5}
	pop {r6}
	pop {r7}
	pop {r8}
	pop {r9}
	pop {r10}
	pop {r14}
	mov pc, r14

.globl palindrome
.type palindrome, %function
palindrome:
	push {r14}
	push {r10}
	push {r9}
	push {r8}
	push {r7}
	push {r6}
	push {r5}
	push {r4}
	push {fp}
	mov fp, sp
	mov r8, #0
	sub sp, sp, r8
.LBpalindrome:
	mov r9, r0
	sub sp, sp, #16
	mov r8, #0
.LB_palindrome0_LOOP_BEGIN:
	mov r6, #4
	cmp r8, r6
	mov r6, #0
	movlt r6, #1
	mov r5, #0
	cmp r6, r5
	beq .LB0_LOOP_END
	b .LB0_LOOP_BODY
.LB0_LOOP_BODY:
	mov r6, r0
	mov r5, r1
	mov r0, r9
	mov r1, #10
	bl __aeabi_idivmod
	mov r10, r1
	mov r0, r6
	mov r1, r5
	mov r6, #4
	mul r6, r8, r6
	mov r5, sp
	str r10, [r5, r6]
	mov r6, r0
	mov r5, r1
	mov r0, r9
	mov r1, #10
	bl __aeabi_idiv
	mov r10, r0
	mov r0, r6
	mov r1, r5
	mov r9, r10
	add r6, r8, #1
	mov r8, r6
	b .LB_palindrome0_LOOP_BEGIN
.LB0_LOOP_END:
	mov r9, #0
	mov r8, #4
	mul r9, r9, r8
	mov r8, sp
	ldr r9, [r8, r9]
	mov r8, #3
	mov r6, #4
	mul r8, r8, r6
	mov r6, sp
	ldr r8, [r6, r8]
	cmp r9, r8
	mov r9, #0
	bne .LB_13_COND_END
	mov r8, #1
	mov r6, #4
	mul r8, r8, r6
	mov r6, sp
	ldr r8, [r6, r8]
	mov r6, #2
	mov r5, #4
	mul r6, r6, r5
	mov r5, sp
	ldr r6, [r5, r6]
	cmp r8, r6
	mov r8, #0
	moveq r8, #1
	mov r9, r8
.LB_13_COND_END:
	mov r8, #0
	cmp r9, r8
	beq .LBB_1_ELSE
	b .LBB_1_IF
.LBB_1_IF:
	mov r7, #1
	b .LBB_1_END_IF
.LBB_1_ELSE:
	mov r7, #0
	b .LBB_1_END_IF
.LBB_1_END_IF:
	mov r0, r7
	mov sp, fp
	pop {fp}
	pop {r4}
	pop {r5}
	pop {r6}
	pop {r7}
	pop {r8}
	pop {r9}
	pop {r10}
	pop {r14}
	mov pc, r14

.ident "@ Generated by Takanashi Compiler Â© Haobin Chen & Jiawei Xu 1640004946"