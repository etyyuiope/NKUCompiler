.macro mov32, reg, val
 	movw \reg, #:lower16:\val
 	movt \reg, #:upper16:\val
.endm
.macro cpu_id, rd
 	mrc	p15, 0, \rd, c0, c0, 5
 	and	\rd, \rd, #0xF
.endm
.text
.syntax unified

.data
.globl ans
ans:
.space 200

.globl sum
sum:
.word 0

.globl n
n:
.word 0

.globl row
row:
.space 200

.globl line1
line1:
.space 200

.globl line2
line2:
.space 400

.globl f
.type f, %function
f:
	push {r14}
	push {r10}
	push {r9}
	push {r8}
	push {r7}
	push {r6}
	push {r5}
	push {r4}
	push {fp}
	mov fp, sp
	mov r8, #0
	sub sp, sp, r8
.LBf:
	mov r9, r0
	mov r8, #1
.LB_f2_LOOP_BEGIN:
	mov r7, #0
	mov32 r7, n
	ldr r7, [r7, #0]
	cmp r8, r7
	mov r7, #0
	movle r7, #1
	mov r6, #0
	cmp r7, r6
	beq .LB2_LOOP_END
	b .LB2_LOOP_BODY
.LB2_LOOP_BODY:
	mov r7, #4
	mul r7, r8, r7
	mov r6, #0
	mov32 r6, row
	ldr r7, [r6, r7]
	mov r6, #1
	cmp r7, r6
	mov r7, #0
	beq .LB_7_COND_END
	mov r6, r8
	add r6, r9, r6
	mov r5, #4
	mul r6, r6, r5
	mov r5, #0
	mov32 r5, line1
	ldr r6, [r5, r6]
	mov r5, #0
	cmp r6, r5
	mov r6, #0
	moveq r6, #1
	mov r7, r6
.LB_7_COND_END:
	mov r6, #0
	cmp r7, r6
	mov r7, #0
	beq .LB_5_COND_END
	mov r6, #0
	mov32 r6, n
	ldr r6, [r6, #0]
	mov r5, r9
	add r6, r6, r5
	mov r5, r8
	sub r6, r6, r5
	mov r5, #4
	mul r6, r6, r5
	mov r5, #0
	mov32 r5, line2
	ldr r6, [r5, r6]
	mov r5, #0
	cmp r5, r6
	mov r6, #0
	moveq r6, #1
	mov r7, r6
.LB_5_COND_END:
	mov r6, #0
	cmp r7, r6
	beq .LBB_3_ELSE
	b .LBB_3_IF
.LBB_3_IF:
	mov r7, #4
	mul r7, r9, r7
	mov r6, #0
	mov32 r6, ans
	str r8, [r6, r7]
	mov r7, #0
	mov32 r7, n
	ldr r7, [r7, #0]
	cmp r9, r7
	mov r7, #0
	moveq r7, #1
	mov r6, #0
	cmp r7, r6
	beq .LBB_4_ELSE
	b .LBB_4_IF
.LBB_4_IF:
	bl printans
	mov r7, r0
.LBB_4_ELSE:
	mov r7, #4
	mul r7, r8, r7
	mov r6, #0
	mov32 r6, row
	mov r5, #1
	str r5, [r6, r7]
	mov r7, r8
	add r7, r9, r7
	mov r6, #4
	mul r7, r7, r6
	mov r6, #0
	mov32 r6, line1
	mov r5, #1
	str r5, [r6, r7]
	mov r7, #0
	mov32 r7, n
	ldr r7, [r7, #0]
	mov r6, r9
	add r7, r7, r6
	mov r6, r8
	sub r7, r7, r6
	mov r6, #4
	mul r7, r7, r6
	mov r6, #0
	mov32 r6, line2
	mov r5, #1
	str r5, [r6, r7]
	add r7, r9, #1
	mov r0, r7
	bl f
	mov r7, r0
	mov r7, #4
	mul r7, r8, r7
	mov r6, #0
	mov32 r6, row
	mov r5, #0
	str r5, [r6, r7]
	mov r7, r8
	add r7, r9, r7
	mov r6, #4
	mul r7, r7, r6
	mov r6, #0
	mov32 r6, line1
	mov r5, #0
	str r5, [r6, r7]
	mov r7, #0
	mov32 r7, n
	ldr r7, [r7, #0]
	mov r6, r9
	add r7, r7, r6
	mov r6, r8
	sub r7, r7, r6
	mov r6, #4
	mul r7, r7, r6
	mov r6, #0
	mov32 r6, line2
	mov r5, #0
	str r5, [r6, r7]
.LBB_3_ELSE:
	add r7, r8, #1
	mov r8, r7
	b .LB_f2_LOOP_BEGIN
.LB2_LOOP_END:
	mov sp, fp
	pop {fp}
	pop {r4}
	pop {r5}
	pop {r6}
	pop {r7}
	pop {r8}
	pop {r9}
	pop {r10}
	pop {r14}
	mov pc, r14

.globl main
.type main, %function
main:
	push {r14}
	push {r10}
	push {r9}
	push {r8}
	push {r7}
	push {r6}
	push {r5}
	push {r4}
	push {fp}
	mov fp, sp
	mov r8, #0
	sub sp, sp, r8
.LBmain:
	bl getint
	mov r8, r0
	mov r9, r8
.LB_main5_LOOP_BEGIN:
	mov r8, #0
	cmp r9, r8
	mov r8, #0
	movgt r8, #1
	mov r7, #0
	cmp r8, r7
	beq .LB5_LOOP_END
	b .LB5_LOOP_BODY
.LB5_LOOP_BODY:
	bl getint
	mov r8, r0
	mov r7, #0
	mov32 r7, n
	ldr r7, [r7, #0]
	mov r7, #0
	mov32 r7, n
	str r8, [r7, #0]
	mov r0, #1
	bl f
	mov r8, r0
	sub r8, r9, #1
	mov r9, r8
	b .LB_main5_LOOP_BEGIN
.LB5_LOOP_END:
	mov r9, #0
	mov32 r9, sum
	ldr r9, [r9, #0]
	mov r0, r9
	mov sp, fp
	pop {fp}
	pop {r4}
	pop {r5}
	pop {r6}
	pop {r7}
	pop {r8}
	pop {r9}
	pop {r10}
	pop {r14}
	mov pc, r14

.globl printans
.type printans, %function
printans:
	push {r14}
	push {r10}
	push {r9}
	push {r8}
	push {r7}
	push {r6}
	push {r5}
	push {r4}
	push {fp}
	mov fp, sp
	mov r8, #0
	sub sp, sp, r8
.LBprintans:
	mov r9, #0
	mov32 r9, sum
	ldr r9, [r9, #0]
	add r9, r9, #1
	mov r8, #0
	mov32 r8, sum
	ldr r8, [r8, #0]
	mov r8, #0
	mov32 r8, sum
	str r9, [r8, #0]
	mov r9, #1
.LB_printans0_LOOP_BEGIN:
	mov r8, #0
	mov32 r8, n
	ldr r8, [r8, #0]
	cmp r9, r8
	mov r8, #0
	movle r8, #1
	mov r7, #0
	cmp r8, r7
	beq .LB0_LOOP_END
	b .LB0_LOOP_BODY
.LB0_LOOP_BODY:
	mov r8, #4
	mul r8, r9, r8
	mov r7, #0
	mov32 r7, ans
	ldr r8, [r7, r8]
	mov r0, r8
	bl putint
	mov r8, r0
	mov r8, #0
	mov32 r8, n
	ldr r8, [r8, #0]
	cmp r9, r8
	mov r8, #0
	moveq r8, #1
	mov r7, #0
	cmp r8, r7
	beq .LBB_1_ELSE
	b .LBB_1_IF
.LBB_1_IF:
	mov r0, #10
	bl putch
	mov r8, r0
	mov sp, fp
	pop {fp}
	pop {r4}
	pop {r5}
	pop {r6}
	pop {r7}
	pop {r8}
	pop {r9}
	pop {r10}
	pop {r14}
	mov pc, r14
.LBB_1_ELSE:
	mov r0, #32
	bl putch
	mov r8, r0
	add r8, r9, #1
	mov r9, r8
	b .LB_printans0_LOOP_BEGIN
.LB0_LOOP_END:
	mov sp, fp
	pop {fp}
	pop {r4}
	pop {r5}
	pop {r6}
	pop {r7}
	pop {r8}
	pop {r9}
	pop {r10}
	pop {r14}
	mov pc, r14

.ident "@ Generated by Takanashi Compiler Â© Haobin Chen & Jiawei Xu 1640004946"