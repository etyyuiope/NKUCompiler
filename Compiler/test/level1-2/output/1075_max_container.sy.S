.macro mov32, reg, val
 	movw \reg, #:lower16:\val
 	movt \reg, #:upper16:\val
.endm
.macro cpu_id, rd
 	mrc	p15, 0, \rd, c0, c0, 5
 	and	\rd, \rd, #0xF
.endm
.text
.syntax unified

.data
.globl main
.type main, %function
main:
	push {r14}
	push {r10}
	push {r9}
	push {r8}
	push {r7}
	push {r6}
	push {r5}
	push {r4}
	push {fp}
	mov fp, sp
	mov r8, #0
	sub sp, sp, r8
.LBmain:
	sub sp, sp, #40
	mov r8, #0
	mov r7, #4
	mov r7, r7
	mul r8, r8, r7
	mov r7, sp
	add r7, r7, #0
	mov r6, #3
	str r6, [r7, r8]
	mov r8, #1
	mov r7, #4
	mov r7, r7
	mul r8, r8, r7
	mov r7, sp
	add r7, r7, #0
	mov r6, #3
	str r6, [r7, r8]
	mov r8, #2
	mov r7, #4
	mov r7, r7
	mul r8, r8, r7
	mov r7, sp
	add r7, r7, #0
	mov r6, #9
	str r6, [r7, r8]
	mov r8, #3
	mov r7, #4
	mov r7, r7
	mul r8, r8, r7
	mov r7, sp
	add r7, r7, #0
	mov r6, #0
	str r6, [r7, r8]
	mov r8, #4
	mov r7, #4
	mov r7, r7
	mul r8, r8, r7
	mov r7, sp
	add r7, r7, #0
	mov r6, #0
	str r6, [r7, r8]
	mov r8, #5
	mov r7, #4
	mov r7, r7
	mul r8, r8, r7
	mov r7, sp
	add r7, r7, #0
	mov r6, #1
	str r6, [r7, r8]
	mov r8, #6
	mov r7, #4
	mov r7, r7
	mul r8, r8, r7
	mov r7, sp
	add r7, r7, #0
	mov r6, #1
	str r6, [r7, r8]
	mov r8, #7
	mov r7, #4
	mov r7, r7
	mul r8, r8, r7
	mov r7, sp
	add r7, r7, #0
	mov r6, #5
	str r6, [r7, r8]
	mov r8, #8
	mov r7, #4
	mov r7, r7
	mul r8, r8, r7
	mov r7, sp
	add r7, r7, #0
	mov r6, #7
	str r6, [r7, r8]
	mov r8, #9
	mov r7, #4
	mov r7, r7
	mul r8, r8, r7
	mov r7, sp
	add r7, r7, #0
	mov r6, #8
	str r6, [r7, r8]
	mov r9, #10
	mov r1, r9
	add r9, sp, #0
	mov r0, r9
	bl maxArea
	mov r9, r0
	add sp, sp, #0
	mov r9, r9
	mov r0, r9
	mov sp, fp
	pop {fp}
	pop {r4}
	pop {r5}
	pop {r6}
	pop {r7}
	pop {r8}
	pop {r9}
	pop {r10}
	pop {r14}
	mov pc, r14

.globl maxArea
.type maxArea, %function
maxArea:
	push {r14}
	push {r10}
	push {r9}
	push {r8}
	push {r7}
	push {r6}
	push {r5}
	push {r4}
	push {fp}
	mov fp, sp
	mov r8, #16
	sub sp, sp, r8
.LBmaxArea:
	mov r9, r0
	str r9, [fp, #-16]
	mov r9, r1
	mov r8, #0
	sub r9, r9, #1
	mov r7, r9
	mov r6, #0
	sub r6, r6, #1
	mov r9, r6
.LB_maxArea0_LOOP_BEGIN:
	cmp r8, r7
	mov r6, #0
	movlt r6, #1
	mov r5, #0
	cmp r6, r5
	beq .LB0_LOOP_END
	b .LB0_LOOP_BODY
.LB0_LOOP_BODY:
	mov r5, #4
	mov r5, r5
	mul r5, r8, r5
	ldr r10, [fp, #-16]
	mov r10, r10
	ldr r5, [r10, r5]
	mov r10, #4
	mov r10, r10
	mul r10, r7, r10
	ldr r4, [fp, #-16]
	mov r4, r4
	str r4, [fp, #-4]
	ldr r4, [fp, #-4]
	ldr r10, [r4, r10]
	cmp r5, r10
	mov r5, #0
	movlt r5, #1
	mov r10, #0
	cmp r5, r10
	beq .LBB_1_ELSE
	b .LBB_1_IF
.LBB_1_IF:
	mov r5, r8
	sub r5, r7, r5
	mov r10, #4
	mov r10, r10
	mul r10, r8, r10
	ldr r4, [fp, #-16]
	mov r4, r4
	str r4, [fp, #-4]
	ldr r4, [fp, #-4]
	ldr r10, [r4, r10]
	mov r10, r10
	mul r5, r5, r10
	mov r6, r5
	b .LBB_1_END_IF
.LBB_1_ELSE:
	mov r5, r8
	sub r5, r7, r5
	mov r10, #4
	mov r10, r10
	mul r10, r7, r10
	ldr r4, [fp, #-16]
	mov r4, r4
	str r4, [fp, #-8]
	ldr r4, [fp, #-8]
	ldr r10, [r4, r10]
	mov r10, r10
	mul r5, r5, r10
	mov r6, r5
	b .LBB_1_END_IF
.LBB_1_END_IF:
	cmp r6, r9
	mov r5, #0
	movgt r5, #1
	mov r10, #0
	cmp r5, r10
	beq .LBB_2_ELSE
	b .LBB_2_IF
.LBB_2_IF:
	mov r9, r6
.LBB_2_ELSE:
	mov r5, #4
	mov r5, r5
	mul r5, r8, r5
	ldr r10, [fp, #-16]
	mov r10, r10
	ldr r5, [r10, r5]
	mov r10, #4
	mov r10, r10
	mul r10, r7, r10
	ldr r4, [fp, #-16]
	mov r4, r4
	str r4, [fp, #-12]
	ldr r4, [fp, #-12]
	ldr r10, [r4, r10]
	cmp r5, r10
	mov r5, #0
	movgt r5, #1
	mov r10, #0
	cmp r5, r10
	beq .LBB_3_ELSE
	b .LBB_3_IF
.LBB_3_IF:
	sub r5, r7, #1
	mov r7, r5
	b .LBB_3_END_IF
.LBB_3_ELSE:
	add r5, r8, #1
	mov r8, r5
	b .LBB_3_END_IF
.LBB_3_END_IF:
	b .LB_maxArea0_LOOP_BEGIN
.LB0_LOOP_END:
	mov r0, r9
	mov sp, fp
	pop {fp}
	pop {r4}
	pop {r5}
	pop {r6}
	pop {r7}
	pop {r8}
	pop {r9}
	pop {r10}
	pop {r14}
	mov pc, r14

.ident "@ Generated by Takanashi Compiler Â© Haobin Chen & Jiawei Xu 1640007213"