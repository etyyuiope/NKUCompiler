[4;90;107mTakanashi Compiler is running!![0m
Reading ../test/level2-4/083_brainfk.sy
This is dead:   MOV           i32 %t4   %t55      
This is dead:   MOV           i32 %t3   %t54      
This is dead:   IADD          %t55      %t4       i32 1     
This is dead:   IADD          %t54      %t3       i32 1     
This is dead:   MOV           i32 %t3   %t52      
This is dead:   ISUB          %t52      %t3       i32 1     
GLOBAL_BEGIN    @TAPE_LEN
  WORD          i32 65536 
GLOBAL_END      @TAPE_LEN

GLOBAL_BEGIN    @BUFFER_LEN
  WORD          i32 32768 
GLOBAL_END      @BUFFER_LEN

GLOBAL_BEGIN    @&tape
  SPACE         i32 262144
GLOBAL_END      @&tape

GLOBAL_BEGIN    @&program
  SPACE         i32 131072
GLOBAL_END      @&program

GLOBAL_BEGIN    @ptr
  WORD          i32 0     
GLOBAL_END      @ptr

FUNC                      0         @read_program

.LB@read_program:
  ALLOCA        %t1       
  MOV           i32 %t1   i32 0     
  ALLOCA        %t2       
  CALL          i32 %t3   getint
  MOV           i32 %t2   i32 %t3   

.LB_read_program0_LOOP_BEGIN:
  CMP           %t1       %t2       
  MOVLT         %t5       i32 1     i32 0     
  CMP           %t5       i32 0     
  JEQ           .LB0_LOOP_END
  JMP           .LB0_LOOP_BODY

.LB0_LOOP_BODY:
  CALL          i8 %t6    getch
  IMUL          %t9       %t1       i32 4     
  STR           @&program %t9       i8 %t6    
  IADD          %t10      %t1       i32 1     
  MOV           i32 %t1   %t10      

.LB0_LOOP_CONTINUE:
  JMP           .LB_read_program0_LOOP_BEGIN

.LB0_LOOP_END:
  IMUL          %t13      %t1       i32 4     
  STR           @&program %t13      i32 0     
  RET           
END_FUNC        

FUNC                      1         @interpret

.LB@interpret:
  MOV           %t*1      $0        
  ALLOCA        %t2       
  ALLOCA        %t3       
  ALLOCA        %t4       
  MOV           i32 %t4   i32 0     

.LB_interpret1_LOOP_BEGIN:
  IMUL          %t7       %t4       i32 4     
  LDR           %t5       %t*1      %t7       
  CMP           %t5       i32 0     
  JEQ           .LB1_LOOP_END
  JMP           .LB1_LOOP_BODY

.LB1_LOOP_BODY:
  IMUL          %t10      %t4       i32 4     
  LDR           %t8       %t*1      %t10      
  MOV           i32 %t2   %t8       
  CMP           %t2       i32 62    
  MOVEQ         %t11      i32 1     i32 0     
  CMP           %t11      i32 0     
  JEQ           .LBB_2_ELSE
  JMP           .LBB_2_IF

.LBB_2_IF:
  IADD          %t12      @ptr      i32 1     
  MOV           i32 @ptr  %t12      
  JMP           .LBB_2_END_IF

.LBB_2_ELSE:
  CMP           %t2       i32 60    
  MOVEQ         %t13      i32 1     i32 0     
  CMP           %t13      i32 0     
  JEQ           .LBB_3_ELSE
  JMP           .LBB_3_IF

.LBB_3_IF:
  ISUB          %t14      @ptr      i32 1     
  MOV           i32 @ptr  %t14      
  JMP           .LBB_3_END_IF

.LBB_3_ELSE:
  CMP           %t2       i32 43    
  MOVEQ         %t15      i32 1     i32 0     
  CMP           %t15      i32 0     
  JEQ           .LBB_4_ELSE
  JMP           .LBB_4_IF

.LBB_4_IF:
  IMUL          %t18      @ptr      i32 4     
  LDR           %t16      @&tape    %t18      
  IADD          %t19      %t16      i32 1     
  IMUL          %t22      @ptr      i32 4     
  STR           @&tape    %t22      %t19      
  JMP           .LBB_4_END_IF

.LBB_4_ELSE:
  CMP           %t2       i32 45    
  MOVEQ         %t23      i32 1     i32 0     
  CMP           %t23      i32 0     
  JEQ           .LBB_5_ELSE
  JMP           .LBB_5_IF

.LBB_5_IF:
  IMUL          %t26      @ptr      i32 4     
  LDR           %t24      @&tape    %t26      
  ISUB          %t27      %t24      i32 1     
  IMUL          %t30      @ptr      i32 4     
  STR           @&tape    %t30      %t27      
  JMP           .LBB_5_END_IF

.LBB_5_ELSE:
  CMP           %t2       i32 46    
  MOVEQ         %t31      i32 1     i32 0     
  CMP           %t31      i32 0     
  JEQ           .LBB_6_ELSE
  JMP           .LBB_6_IF

.LBB_6_IF:
  IMUL          %t35      @ptr      i32 4     
  LDR           %t33      @&tape    %t35      
  PUSH          i32 0     %t33      
  CALL          %t32      putch
  JMP           .LBB_6_END_IF

.LBB_6_ELSE:
  CMP           %t2       i32 44    
  MOVEQ         %t36      i32 1     i32 0     
  CMP           %t36      i32 0     
  JEQ           .LBB_7_ELSE
  JMP           .LBB_7_IF

.LBB_7_IF:
  CALL          i8 %t37   getch
  IMUL          %t40      @ptr      i32 4     
  STR           @&tape    %t40      i8 %t37   
  JMP           .LBB_7_END_IF

.LBB_7_ELSE:
  CMP           %t2       i32 93    
  PHI           %t41      i32 0     
  JNE           .LB_42_COND_END
  IMUL          %t45      @ptr      i32 4     
  LDR           %t43      @&tape    %t45      
  PHI           %t41      %t43      

.LB_42_COND_END:
  CMP           %t41      i32 0     
  JEQ           .LBB_8_ELSE
  JMP           .LBB_8_IF

.LBB_8_IF:
  MOV           i32 %t3   i32 1     

.LB_9_LOOP_BEGIN:
  CMP           %t3       i32 0     
  MOVGT         %t46      i32 1     i32 0     
  CMP           %t46      i32 0     
  JEQ           .LB9_LOOP_END
  JMP           .LB9_LOOP_BODY

.LB9_LOOP_BODY:
  ISUB          %t47      %t4       i32 1     
  MOV           i32 %t4   %t47      
  IMUL          %t50      %t4       i32 4     
  LDR           %t48      %t*1      %t50      
  MOV           i32 %t2   %t48      
  CMP           %t2       i32 91    
  MOVEQ         %t51      i32 1     i32 0     
  CMP           %t51      i32 0     
  JEQ           .LBB_10_ELSE
  JMP           .LBB_10_IF

.LBB_10_IF:
  ISUB          %t52      %t3       i32 1     
  MOV           i32 %t3   %t52      
  JMP           .LBB_10_END_IF

.LBB_10_ELSE:
  CMP           %t2       i32 93    
  MOVEQ         %t53      i32 1     i32 0     
  CMP           %t53      i32 0     
  JEQ           .LBB_11_ELSE
  JMP           .LBB_11_IF

.LBB_11_IF:
  IADD          %t54      %t3       i32 1     
  MOV           i32 %t3   %t54      

.LBB_11_ELSE:
  JMP           .LBB_11_END_IF

.LBB_11_END_IF:
  JMP           .LBB_10_END_IF

.LBB_10_END_IF:

.LB9_LOOP_CONTINUE:
  JMP           .LB_9_LOOP_BEGIN

.LB9_LOOP_END:

.LBB_8_ELSE:
  JMP           .LBB_8_END_IF

.LBB_8_END_IF:
  JMP           .LBB_7_END_IF

.LBB_7_END_IF:
  JMP           .LBB_6_END_IF

.LBB_6_END_IF:
  JMP           .LBB_5_END_IF

.LBB_5_END_IF:
  JMP           .LBB_4_END_IF

.LBB_4_END_IF:
  JMP           .LBB_3_END_IF

.LBB_3_END_IF:
  JMP           .LBB_2_END_IF

.LBB_2_END_IF:
  IADD          %t55      %t4       i32 1     
  MOV           i32 %t4   %t55      

.LB1_LOOP_CONTINUE:
  JMP           .LB_interpret1_LOOP_BEGIN

.LB1_LOOP_END:
  RET           
END_FUNC        

FUNC            i32       0         @main

.LB@main:
  CALL          %t1       read_program
  PUSH          i32 0     @&program 
  CALL          %t2       interpret
  RET           i32 0     
END_FUNC        

